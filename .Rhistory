h2o.ls(h2conn)
h2o.ls(h2conn)
h2o.clusterInfo(h2conn)
h2o.ls(h2conn)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
ls
dir
ls()
View(predictors)
diagnosis
adData = data.frame(diagnosis,predictors)
adData
summary(adData)
?createDataPartition
createDataPartition(adData, p=0.5, list=FASLE)
createDataPartition(adData, p=0.5, list=FALSE)
createDataPartition(adData, p=0.5, list=TRUE)
createDataPartition(adData, p=0.5)
createDataPartition(diagnosis, p=0.5)
createDataPartition(diagnosis, p=0.5, list=FALSE)
createDataPartition(diagnosis, p=0.5, list=TRUE)
ind = createDataPartition(diagnosis, p=0.5, list=TRUE)
adData[ind]
adData[ind,]
ind = createDataPartition(diagnosis, p=0.5, list=FALSE)
adData[ind,]
ind = createDataPartition(diagnosis, p=0.5, list=TRUE)
ind
ind[[1]]
ind = createDataPartition(diagnosis, times=4, p=0.5, list=TRUE)
ind
ind = createDataPartition(diagnosis, times=4, p=0.5, list=FALSE)
ind
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training
summary(training)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col=traning$age)
plot(training$CompressiveStrength, col=training$age)
plot(training$CompressiveStrength, col=training$Cement)
plot(training$CompressiveStrength, col=black
)
plot(training$CompressiveStrength, col=1)
plot(training$CompressiveStrength, col=2)
plot(training$CompressiveStrength, col=0)
plot(training$CompressiveStrength, col=4)
load(Hmisc)
library(Hmisc)
?cut2
plot(training$CompressiveStrength, col=cut2(training$Age, g=10) +1)
plot(training$CompressiveStrength, col=cut2(training$Age, g=10))
plot(training$CompressiveStrength, col=cut2(training$Cement, g=10))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
plot(training$CompressiveStrength, col=cut2(training$Age, g=10))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
plot(training$CompressiveStrength, col=cut2(training$Cement, g=10))
plot(training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag, g=10))
plot(training$CompressiveStrength, col=cut2(training$Water, g=10))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
training
str(training)
len(training)
lenght(training)
length(training)
par(mfrow=c(3,3))
for (i<-1..20) { i}
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
par(mfrow=c(3,3))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))
par(mfrow=c(3,3))
for (i in 1:9) { plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10))}
par(mfrow=c(3,3))
for (i in 1:9) { plot(training$CompressiveStrength, col=cut2(training[[i]], g=10))}
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(training$Superplasticizer)
par(mfcol=(1,1))
par(mfcol=c(1,1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
summary(training)
hist(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer+2))
?hist
hist(training$Superplasticizer, breaks=100)
hist(log(training$Superplasticizer+1), breaks=100)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
names(training)
lgrep
?lgrep
?grep
grepl(
"IL_.*", names(trainig))
grepl(
"IL_.*", names(training))
il = grepl("IL_.*", names(training))
ilData = training[il,]
ilData
il
traning[ilData]
traning[il]
training[il]
str(training[il])
il = grepl("^IL_.*", names(training))
idData = training[il]
str(idData)
?preProcess
m = preProcess(idData, "pca", thresh=0.9)
m
?train
train(idData, training$diagnosis, method="glm")
fullglm = train(idData, training$diagnosis, method="glm")
caret
?train
?test
??caret
?train
??caret
fullPred <- predict(fullglm, newdata=testing)
fullPred
confusionMatrix(fullPred, testing$diagnosis)
idData
train
?train
train(idData, training$diagnosis, method="glm", preProcess="pca")
train(idData, training$diagnosis, method="glm", preProcess="pca", threshold=0.8)
train(idData, training$diagnosis, method="glm", preProcess="pca", thresh=0.8)
m = preProcess(idData, "pca", thresh=0.8)
m
predict(m, newdata=idDat)
predict(m, newdata=idData)
pcaTrain = predict(m, newdata=idData)
install.packages("scidb")
library(scidb)
??scidb
?scidbdisconnect
?scidbconnect
scidbconnect(host='152.83.253.80')
scidbconnect(host='152.83.253.80')
my.mat <- as.scidb(matrix(rnorm(1000*1000), 1000))
my.mat
str(my.mat)
my.mat[]
ls
str(my.mat)
my.mat.crossprod <- crossprod( mymat[])
my.mat.crossprod <- crossprod( my.mat[])
str(my.mat.crossprod)
my.mat.crossprod <- crossprod( my.mat)
my.mat.svd.5 <- svd( my.mat, nu = 5)
str(my.mat.svd.5)
my.mat.svd.5$u[]
my.mat.svd.5$u[1:5]
my.mat.svd.5$u[1]
my.mat.svd.5$u[1,1]
my.mat.svd.5$u[1,1][]
my.mat.svd.5$u[1,5][]
my.mat.svd.5$u[1,1:5][]
my.mat.crossprod <- crossprod( my.mat)
my.mat.crossprod[1:5,1:5][]
summary(my.mat.crossprod)
my.mat.crossprod.t <- crossprod( my.mat[])
summary(my.mat.crossprod.t)
class(my.mat.crossprod.t)
my.mat.crossprod <- crossprod( my.mat)
dim(my.mat)
?as.scidb
??scidb
str(my.mat)
?crossprod,scidb,scidb-method
?crossprod.scidb
?crossprod
?scidb.crossprod
??scidb.crossprod
??crossprod
setwd("~/edu/pml")
libray(caret)
library(caret)
trainData <- read.csv("pml-training.csv")
str(trainDta)
str(trainData)
summary(trainData)
summary(trainData[trainData$new_window == 1])
summary(trainData[trainData$new_window == 1], 1)
summary(trainData[trainData$new_window == 1], )
trainData$new_window == 1
trainData[trainData$new_window == 1, ]
which(trainData$new_window == 1)
trainData$new_window == 1
str(trainData)
trainData$new_window = "yes"
trainData <- read.csv("pml-training.csv")
trainData$new_window == "yes"
neData = trainData[trainData$new_window == "yes"]
neData <- trainData[trainData$new_window == "yes",]
str(neData)
summaru(neData)
summary(neDataa)
summaru(neData)
summary(neData)
str(trainData)
plot(trainData$numWindow)
plot(trainData$num_window)
plot(trainData$user_name)
plot(as.numeric(trainData$user_name))
plot(as.numeric(trainData$raw_timestamp))
plot(as.numeric(trainData$raw_timestamp_part_1))
plot(as.numeric(trainData$raw_timestamp_part_2))
plot(as.numeric(trainData$roll_belt))
plot(trainData$roll_belt, col=trainData$user_name)
str(trainData)
plot(trainData$roll_belt, col=trainData$window_no)
plot(trainData$roll_belt, col=trainData$num_window)
plot(trainData$avg_roll_belt, col=trainData$user_name)
plot(trainData$max_roll_arm col=trainData$user_name)
plot(trainData$max_roll_arm, col=trainData$user_name)
names(trainData)
plot(trainData$max_roll_arm, col=trainData$classe)
plot(trainData$roll_belt, col=trainData$classe)
plot(trainData$roll_drumbell, col=trainData$classe)
plot(trainData$roll_arm, col=trainData$classe)
plot(trainData$max_roll_arm, col=trainData$classe)
plot(trainData$max_roll_arm, col=trainData$new_window)
plot(trainData$roll_arm, col=trainData$new_window)
hist(trainData$numWindow)
hist(trainData$num_window)
plot(trainData$num_window)
plot(trainData$num_window, col=trainData$new_window)
plot(trainData$num_window, col=trainData$classe)
plot(trainData$num_window, col=trainData$user_name)
?ggplot
?ggplot2
?ggplot
ggplot(data = trainData, aes(y=num_window, col=user_name)) + geom_point()
ggplot(data = trainData, aes(x=X, y=num_window, col=user_name)) + geom_point()
ggplot(data = trainData, aes(y=num_window, col=new_window)) + geom_point()
ggplot(data = trainData, aes(x=X, y=num_window, col=new_window)) + geom_point()
ggplot(data = trainData, aes(x=X, y=new_window, col=new_window)) + geom_point()
ggplot(data = trainData, aes(x=X, y=num_window, col=user_name)) + geom_point()
ggplot(data = trainData, aes(x=X, y=new_window, col=user_name)) + geom_point()
ggplot(data = trainData, aes(x=X, y=num_window, col=user_name)) + geom_point()
trainData$num_window
trainData$avg_roll_belt
trainData$new_window
trainData[,c("new_window", "num_window")]
trainData[,c("new_window", "num_window", "avg_arm_roll")]
trainData[,c("new_window", "num_window", "avg_roll_arm")]
trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm")]
trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name")]
trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")]
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")])
?head
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")], n=100)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")], n=200)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")], n=300)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")], n=400)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")], n=500)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")], n=600)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe")], n=1000)
str(trainData)
data <- trainData[trainData$new_window == "yes",]
data
ggplot(data = data, aes(x=avg_roll_arm, y=avg_roll_belt, col=classe)) + geom_point()
str(data)
ggplot(data = data, aes(x=avg_roll_arm, y=avg_roll_dumbbelt, col=classe)) + geom_point()
ggplot(data = data, aes(x=avg_roll_arm, y=avg_yaw_arm, col=classe)) + geom_point()
ggplot(data = data, aes(x=avg_roll_arm, y=avg_pitch_arm, col=classe)) + geom_point()
ggplot(data = data, aes(x=avg_roll_belt, y=avg_pitch_arm, col=classe)) + geom_point()
ggplot(data = data, aes(x=avg_roll_belt, y=avg_pitch_belt, col=classe)) + geom_point()
ggplot(data = data, aes(x=avg_roll_belt, y=avg_yaw_belt, col=classe)) + geom_point()
ggplot(data = data, aes(x=avg_roll_dumbbell, y=avg_yaw_belt, col=classe)) + geom_point()
ggplot(data = data, aes(x=avg_roll_dumbbell, y=avg_yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data, aes(x=avg_pitch_dumbbell, y=avg_yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data, aes(x=max_pitch_dumbbell, y=avg_yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data, aes(x=max_picth_dumbbell, y=avg_yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data, aes(x=max_picth_dumbbell, y=max_yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data, aes(x=raw_timestamp_part_1, y=avg_yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data[0:100,], aes(x=max_picth_dumbbell, y=max_yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data[0:100,], aes(x=raw_timestamp_part_1, y=avg_yaw_dumbbell, col=classe)) + geom_point()
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe", "raw_timestamp_part_1")], n=1000)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "roll_arm", "user_name", "classe", "raw_timestamp_part_1", "raw_timestamp_part_2")], n=1000)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", classe", "raw_timestamp_part_1", "raw_timestamp_part_2")], n=1000)
head(trainData[,c("new_window", "num_window", "avg_roll_arm", "classe", "raw_timestamp_part_1", "raw_timestamp_part_2")], n=1000)
head(trainData[,c("new_window", "num_window", "user_name", "classe", "raw_timestamp_part_1", "raw_timestamp_part_2")], n=1000)
head(trainData[,c("new_window", "num_window", "user_name", "classe", "raw_timestamp_part_1", "raw_timestamp_part_2")], n=1100)
head(trainData[,c("new_window", "num_window", "user_name", "avg_roll_arm", "raw_timestamp_part_1", "raw_timestamp_part_2")], n=1100)
trainData <- read.csv("pml-testing.csv")
trainData
str(trainData)
summary(trainData)
trainData <- read.csv("pml-training.csv")
ggplot(data = data, aes(x=picth_dumbbell, y=yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data, aes(x=pitch_dumbbell, y=yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_dumbbell, y=yaw_dumbbell, col=classe)) + geom_point()
ggplot(data = data, aes(x=pitch_arm, y=yaw_arm, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_arm, y=yaw_arm, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_arm, y=roll_arm, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_dumbbel, y=roll_arm, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_dumbbell, y=roll_dumbbell, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_dumbbell, y=roll_arm, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_arm, y=roll_arm, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_arm, y=accel_forearm_z, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_arm, y=accel_forearm_y, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_arm, y=accel_forearm_z, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_arm, y=accel_forearm_x, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=pitch_arm, y=accel_forearm_z, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=accel_forearm_z, y=accel_forearm_z, col=classe)) + geom_point()
ggplot(data = trainData, aes(x=accel_forearm_y, y=accel_forearm_z, col=classe)) + geom_point()
?train
train(classe~accel_forearm_y + accel_forearm_x, data = trainData, method="rf")
randomForest(classe~accel_forearm_y + accel_forearm_x, importance=TRUE, ntrees=100)
randomForest(classe~accel_forearm_y + accel_forearm_x, data = trainData, importance=TRUE, ntrees=100)
model -> randomForest(classe~accel_forearm_y + accel_forearm_x, data = trainData, importance=TRUE, ntrees=100)
model <- randomForest(classe~accel_forearm_y + accel_forearm_x, data = trainData, importance=TRUE, ntrees=100)
plot(model)
varImpPlot(model)
model <- randomForest(classe~accel_forearm_y + accel_forearm_x + accel_forearm_x , data = trainData, importance=TRUE, ntrees=100)
model <- randomForest(classe~accel_forearm_y + accel_forearm_x + accel_forearm_z , data = trainData, importance=TRUE, ntrees=100)
varImpPlot(model)
summary(model)
model
str(trainData)
model <- randomForest(classe~accel_forearm_y + accel_forearm_x + accel_forearm_z + roll_arm + yaw_arm + pitch_arm , data = trainData, importance=TRUE, ntrees=100)
model
varImpPlot(model)
model <- randomForest(classe~accel_forearm_y + accel_forearm_x + accel_forearm_z + roll_arm + yaw_arm + pitch_arm + roll_belt + yaw_belt + pitch_belt , data = trainData, importance=TRUE, ntrees=100)
varImpPlot(model)
model <- randomForest(classe~accel_forearm_y + accel_forearm_x + accel_forearm_z + roll_arm + yaw_arm + pitch_arm + roll_belt + yaw_belt + pitch_belt + roll_dumbbell + yaw_dumbbell + pitch_dumbbell, data = trainData, importance=TRUE, ntrees=100)
model
varImpPlot(model)
str(trainData)
name(trainData)
names(tainData)
names(trainData)
model <- randomForest(classe~accel_forearm_y + accel_forearm_x + accel_forearm_z + roll_arm + yaw_arm + pitch_arm + roll_belt + yaw_belt + pitch_belt + roll_dumbbell + yaw_dumbbell + pitch_dumbbell + roll_forearm + yaw_forearm + pitch_forearm, data = trainData, importance=TRUE, ntrees=100)
varImpPlot(model)
model
predict(mode, newData = trainData)
predict(model, newData = trainData)
createDataPartition(y=trainData, p=0.75, list=FASLE)
createDataPartition(y=trainData, p=0.75, list=FALSE)
?createDataPartition
createDataPartition(y=trainData$classe, p=0.75, list=FALSE)
ls
trainIdx <-createDataPartition(y=trainData$classe, p=0.75, list=FALSE)
trainSet <- trainData[trainIdx, ]
testSet <- trainData[-trainIdx, ]
model <- randomForest(classe~accel_forearm_y + accel_forearm_x + accel_forearm_z + roll_arm + yaw_arm + pitch_arm + roll_belt + yaw_belt + pitch_belt + roll_dumbbell + yaw_dumbbell + pitch_dumbbell + roll_forearm + yaw_forearm + pitch_forearm, data = trainSet, importance=TRUE, ntrees=100)
model
varImpPlot(model)
pred <- predict(model, newData = testSet)
?confusionMatrix
confusionMatrix(pred, testSet$classe)
pred
len(pred)
length(pred)
length(testSet$classe)
pred <- predict(model, newData = testSet)
pred
?predict
?predict.randomForest
pred <- predict(model, newData = testSet)
pred
testSwt
testSet
len(testSet)
length(testSet)
length(testSet$classe)
length(trainSet$classe)
pred <- predict(model, newData = testSet)
length(pred)
pred <- predict(model, newdata = testSet)
confusionMatrix(pred, testSet$classe)
pred <- predict(model, newdata = testData)
testData <-read.csv("pml-testing.csv")
predTest <- predict(model, newdata = testData)
predTest
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
varImpPlot(model)
pred <- predict(model, newdata = testSet)
confusionMatrix(pred, testSet$classe)
predTest <- predict(model, newdata = testData)
print(predTest)
model <- randomForest(classe~ roll_arm + yaw_arm + pitch_arm + roll_belt + yaw_belt
model <- randomForest(classe~roll_arm + yaw_arm + pitch_arm + roll_belt + yaw_belt
+ pitch_belt + roll_dumbbell + yaw_dumbbell + pitch_dumbbell + roll_forearm + yaw_forearm
+ pitch_forearm, data = trainSet, importance=TRUE, ntrees=100)
model <- randomForest(classe~roll_arm + yaw_arm + pitch_arm + roll_belt + yaw_belt
+ pitch_belt + roll_dumbbell + yaw_dumbbell + pitch_dumbbell + roll_forearm + yaw_forearm
+ pitch_forearm, data = trainSet, importance=TRUE, ntrees=100)
pred <- predict(model, newdata = testSet)
confusionMatrix(pred, testSet$classe)
predTest <- predict(model, newdata = testData)
print(predTest)
source('~/edu/pml/train.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(trainSata)
name(trainData)
names(trainData)
summary(trainSet)
source('~/.active-rstudio-document', echo=TRUE)
str(names)
names(testSet)
source('~/edu/pml/train.R', echo=TRUE)
source('~/edu/pml/train.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predTest)
dir()
predTest
setwd("~/edu/pml/repo")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
ls
ls
ls()
str(diagnosis)
str(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ls
ls()
hist(training$Superplasticizer)
hist(training$Superplasticizer)
?hist
hist(training$Superplasticizer, breaks=100)
summar(training$Superplasticizer)
summary(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
names(traning)
names(traning)
names(training)
names(training)
?grepl
grepl("IL.*", names(training))
training[grepl("IL.*", names(training)), ]
training[, grepl("IL.*", names(training)) ]
names(training[, grepl("IL.*", names(training)) ])
names(training[, grepl("^IL.*", names(training)) ])
ildata <- training[, grepl("^IL.*", names(training)) ]
?preProcess
preProcess(ildata,"pca", thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ildata <- training[, grepl("^IL.*", names(training)) ]
?train
train(ildata,training$diagnosis, method="glm")
model <-train(ildata,training$diagnosis, method="glm")
iltest <- testing[, grepl("^IL.*", names(training)) ]
pred <-predict(mode, newdata=iltest)
pred <-predict(model, newdata=iltest)
pred
?confusionMatrix
?confusionMatrix(pred, testing$diagnosis)
?confusionMatrix(pred, testing$diagnosis)
confusionMatrix(pred, testing$diagnosis)
?train
?trainControl
modelPca <-train(ildata,training$diagnosis, method="glm", preProcess="pca", trControl = trainContol(preProcOptions=list(thresh=0.8)))
modelPca <-train(ildata,training$diagnosis, method="glm", preProcess="pca", trControl = trainControl(preProcOptions=list(thresh=0.8)))
predPca = predict(modelPca, newdata=iltest)
confusionMatrix(predPca, testing$diagnosis)
